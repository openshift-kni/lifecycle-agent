// Code generated by MockGen. DO NOT EDIT.
// Source: rpmostreeclient.go
//
// Generated by this command:
//
//	mockgen -source=rpmostreeclient.go -package=rpmostreeclient -destination=mock_rpmostreeclient.go
//
// Package rpmostreeclient is a generated GoMock package.
package rpmostreeclient

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIClient is a mock of IClient interface.
type MockIClient struct {
	ctrl     *gomock.Controller
	recorder *MockIClientMockRecorder
}

// MockIClientMockRecorder is the mock recorder for MockIClient.
type MockIClientMockRecorder struct {
	mock *MockIClient
}

// NewMockIClient creates a new mock instance.
func NewMockIClient(ctrl *gomock.Controller) *MockIClient {
	mock := &MockIClient{ctrl: ctrl}
	mock.recorder = &MockIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClient) EXPECT() *MockIClientMockRecorder {
	return m.recorder
}

// GetCurrentStaterootName mocks base method.
func (m *MockIClient) GetCurrentStaterootName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentStaterootName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentStaterootName indicates an expected call of GetCurrentStaterootName.
func (mr *MockIClientMockRecorder) GetCurrentStaterootName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentStaterootName", reflect.TypeOf((*MockIClient)(nil).GetCurrentStaterootName))
}

// GetDeploymentID mocks base method.
func (m *MockIClient) GetDeploymentID(osname string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentID", osname)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentID indicates an expected call of GetDeploymentID.
func (mr *MockIClientMockRecorder) GetDeploymentID(osname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentID", reflect.TypeOf((*MockIClient)(nil).GetDeploymentID), osname)
}

// IsStaterootBooted mocks base method.
func (m *MockIClient) IsStaterootBooted(stateroot string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStaterootBooted", stateroot)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsStaterootBooted indicates an expected call of IsStaterootBooted.
func (mr *MockIClientMockRecorder) IsStaterootBooted(stateroot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStaterootBooted", reflect.TypeOf((*MockIClient)(nil).IsStaterootBooted), stateroot)
}

// QueryStatus mocks base method.
func (m *MockIClient) QueryStatus() (*Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryStatus")
	ret0, _ := ret[0].(*Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryStatus indicates an expected call of QueryStatus.
func (mr *MockIClientMockRecorder) QueryStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryStatus", reflect.TypeOf((*MockIClient)(nil).QueryStatus))
}

// RpmOstreeVersion mocks base method.
func (m *MockIClient) RpmOstreeVersion() (*VersionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RpmOstreeVersion")
	ret0, _ := ret[0].(*VersionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RpmOstreeVersion indicates an expected call of RpmOstreeVersion.
func (mr *MockIClientMockRecorder) RpmOstreeVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RpmOstreeVersion", reflect.TypeOf((*MockIClient)(nil).RpmOstreeVersion))
}

// newCmd mocks base method.
func (m *MockIClient) newCmd(args ...string) []byte {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "newCmd", varargs...)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// newCmd indicates an expected call of newCmd.
func (mr *MockIClientMockRecorder) newCmd(args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "newCmd", reflect.TypeOf((*MockIClient)(nil).newCmd), args...)
}

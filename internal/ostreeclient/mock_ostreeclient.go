// Code generated by MockGen. DO NOT EDIT.
// Source: ostreeclient.go
//
// Generated by this command:
//
//	mockgen -source=ostreeclient.go -package=ostreeclient -destination=mock_ostreeclient.go
//
// Package ostreeclient is a generated GoMock package.
package ostreeclient

import (
	reflect "reflect"

	rpmostreeclient "github.com/openshift-kni/lifecycle-agent/lca-cli/ostreeclient"
	gomock "go.uber.org/mock/gomock"
)

// MockIClient is a mock of IClient interface.
type MockIClient struct {
	ctrl     *gomock.Controller
	recorder *MockIClientMockRecorder
}

// MockIClientMockRecorder is the mock recorder for MockIClient.
type MockIClientMockRecorder struct {
	mock *MockIClient
}

// NewMockIClient creates a new mock instance.
func NewMockIClient(ctrl *gomock.Controller) *MockIClient {
	mock := &MockIClient{ctrl: ctrl}
	mock.recorder = &MockIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClient) EXPECT() *MockIClientMockRecorder {
	return m.recorder
}

// Deploy mocks base method.
func (m *MockIClient) Deploy(osname, refsepc string, kargs []string, rpmOstreeClient rpmostreeclient.IClient, ibi bool, useBootc bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", osname, refsepc, kargs, rpmOstreeClient, ibi)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deploy indicates an expected call of Deploy.
func (mr *MockIClientMockRecorder) Deploy(osname, refsepc, kargs, rpmOstreeClient, ibi, useBootc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockIClient)(nil).Deploy), osname, refsepc, kargs, rpmOstreeClient, ibi)
}

// GetDeployment mocks base method.
func (m *MockIClient) GetDeployment(osname string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployment", osname)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment.
func (mr *MockIClientMockRecorder) GetDeployment(osname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockIClient)(nil).GetDeployment), osname)
}

// GetDeploymentDir mocks base method.
func (m *MockIClient) GetDeploymentDir(osname string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentDir", osname)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentDir indicates an expected call of GetDeploymentDir.
func (mr *MockIClientMockRecorder) GetDeploymentDir(osname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentDir", reflect.TypeOf((*MockIClient)(nil).GetDeploymentDir), osname)
}

// IsOstreeAdminSetDefaultFeatureEnabled mocks base method.
func (m *MockIClient) IsOstreeAdminSetDefaultFeatureEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOstreeAdminSetDefaultFeatureEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOstreeAdminSetDefaultFeatureEnabled indicates an expected call of IsOstreeAdminSetDefaultFeatureEnabled.
func (mr *MockIClientMockRecorder) IsOstreeAdminSetDefaultFeatureEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOstreeAdminSetDefaultFeatureEnabled", reflect.TypeOf((*MockIClient)(nil).IsOstreeAdminSetDefaultFeatureEnabled))
}

// OSInit mocks base method.
func (m *MockIClient) OSInit(osname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OSInit", osname)
	ret0, _ := ret[0].(error)
	return ret0
}

// OSInit indicates an expected call of OSInit.
func (mr *MockIClientMockRecorder) OSInit(osname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSInit", reflect.TypeOf((*MockIClient)(nil).OSInit), osname)
}

// PullLocal mocks base method.
func (m *MockIClient) PullLocal(repoPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullLocal", repoPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// PullLocal indicates an expected call of PullLocal.
func (mr *MockIClientMockRecorder) PullLocal(repoPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullLocal", reflect.TypeOf((*MockIClient)(nil).PullLocal), repoPath)
}

// SetDefaultDeployment mocks base method.
func (m *MockIClient) SetDefaultDeployment(index int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultDeployment", index)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDefaultDeployment indicates an expected call of SetDefaultDeployment.
func (mr *MockIClientMockRecorder) SetDefaultDeployment(index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultDeployment", reflect.TypeOf((*MockIClient)(nil).SetDefaultDeployment), index)
}

// Undeploy mocks base method.
func (m *MockIClient) Undeploy(ostreeIndex int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Undeploy", ostreeIndex)
	ret0, _ := ret[0].(error)
	return ret0
}

// Undeploy indicates an expected call of Undeploy.
func (mr *MockIClientMockRecorder) Undeploy(ostreeIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Undeploy", reflect.TypeOf((*MockIClient)(nil).Undeploy), ostreeIndex)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ostreeclient.go
//
// Generated by this command:
//
//	mockgen -source=ostreeclient.go -package=ostreeclient -destination=mock_ostreeclient.go
//
// Package ostreeclient is a generated GoMock package.
package ostreeclient

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIClient is a mock of IClient interface.
type MockIClient struct {
	ctrl     *gomock.Controller
	recorder *MockIClientMockRecorder
}

// MockIClientMockRecorder is the mock recorder for MockIClient.
type MockIClientMockRecorder struct {
	mock *MockIClient
}

// NewMockIClient creates a new mock instance.
func NewMockIClient(ctrl *gomock.Controller) *MockIClient {
	mock := &MockIClient{ctrl: ctrl}
	mock.recorder = &MockIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClient) EXPECT() *MockIClientMockRecorder {
	return m.recorder
}

// Deploy mocks base method.
func (m *MockIClient) Deploy(osname, refsepc string, kargs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", osname, refsepc, kargs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deploy indicates an expected call of Deploy.
func (mr *MockIClientMockRecorder) Deploy(osname, refsepc, kargs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockIClient)(nil).Deploy), osname, refsepc, kargs)
}

// OSInit mocks base method.
func (m *MockIClient) OSInit(osname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OSInit", osname)
	ret0, _ := ret[0].(error)
	return ret0
}

// OSInit indicates an expected call of OSInit.
func (mr *MockIClientMockRecorder) OSInit(osname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSInit", reflect.TypeOf((*MockIClient)(nil).OSInit), osname)
}

// PullLocal mocks base method.
func (m *MockIClient) PullLocal(repoPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullLocal", repoPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// PullLocal indicates an expected call of PullLocal.
func (mr *MockIClientMockRecorder) PullLocal(repoPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullLocal", reflect.TypeOf((*MockIClient)(nil).PullLocal), repoPath)
}

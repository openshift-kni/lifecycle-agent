---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.13.0
  name: imagebasedupgrades.lca.openshift.io
spec:
  group: lca.openshift.io
  names:
    kind: ImageBasedUpgrade
    listKind: ImageBasedUpgradeList
    plural: imagebasedupgrades
    shortNames:
    - ibu
    singular: imagebasedupgrade
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .spec.stage
      name: Desired Stage
      type: string
    - jsonPath: .status.conditions[-1:].reason
      name: State
      type: string
    - jsonPath: .status.conditions[-1:].message
      name: Details
      type: string
    name: v1
    schema:
      openAPIV3Schema:
        description: ImageBasedUpgrade is the Schema for the ImageBasedUpgrades API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ImageBasedUpgradeSpec defines the desired state of ImageBasedUpgrade
            properties:
              autoRollbackOnFailure:
                description: AutoRollbackOnFailure defines automatic rollback settings
                  if the upgrade fails or if the upgrade does not complete within
                  the specified time limit.
                properties:
                  initMonitorTimeoutSeconds:
                    description: InitMonitorTimeoutSeconds defines the time frame
                      in seconds. If not defined or set to 0, the default value of
                      1800 seconds (30 minutes) is used.
                    minimum: 0
                    type: integer
                type: object
              extraManifests:
                description: ExtraManifests defines the list of ConfigMap resources
                  that contain the user-specific extra manifests to be applied during
                  the upgrade post-pivot stage. Users can also add their custom catalog
                  sources that may want to retain after the upgrade.
                items:
                  description: ConfigMapRef defines a reference to a config map
                  properties:
                    name:
                      type: string
                    namespace:
                      type: string
                  required:
                  - name
                  - namespace
                  type: object
                type: array
              oadpContent:
                description: OADPContent defines the list of ConfigMap resources that
                  contain the OADP Backup and Restore CRs.
                items:
                  description: ConfigMapRef defines a reference to a config map
                  properties:
                    name:
                      type: string
                    namespace:
                      type: string
                  required:
                  - name
                  - namespace
                  type: object
                type: array
              seedImageRef:
                description: SeedImageRef defines the seed image and OCP version for
                  the upgrade
                properties:
                  image:
                    description: Image defines the full pull-spec of the seed container
                      image to use.
                    minLength: 1
                    pattern: ^([a-z0-9]+://)?[\S]+$
                    type: string
                  pullSecretRef:
                    description: PullSecretRef defines the reference to a secret with
                      credentials to pull container images.
                    properties:
                      name:
                        type: string
                    required:
                    - name
                    type: object
                  version:
                    description: Version defines the target platform version. The
                      value must match the version of the seed image.
                    type: string
                type: object
              stage:
                description: ImageBasedUpgradeStage defines the type for the IBU stage
                  field
                enum:
                - Idle
                - Prep
                - Upgrade
                - Rollback
                type: string
            type: object
          status:
            description: ImageBasedUpgradeStatus defines the observed state of ImageBasedUpgrade
            properties:
              conditions:
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              history:
                description: History stores timing info of different IBU stages and
                  their important phases
                items:
                  properties:
                    completionTime:
                      description: CompletionTime A timestamp indicating the Stage
                        completed. This is only available when a Stage completes successfully
                      format: date-time
                      type: string
                    phases:
                      description: Phase Allows for a more granular view of the important
                        tasks that are performed when moving a desired Stage
                      items:
                        properties:
                          completionTime:
                            description: CompletionTime A timestamp indicating the
                              phase completed. This is only available when a Phase
                              completes successfully
                            format: date-time
                            type: string
                          phase:
                            description: Phase current phase within a Stage
                            type: string
                          startTime:
                            description: StartTime A timestamp indicating the Phase
                              has started
                            format: date-time
                            type: string
                        type: object
                      type: array
                    stage:
                      description: Stage The desired stage name read from spec
                      type: string
                    startTime:
                      description: StartTime A timestamp to indicate the Stage has
                        started
                      format: date-time
                      type: string
                  type: object
                type: array
              observedGeneration:
                format: int64
                type: integer
              rollbackAvailabilityExpiration:
                description: RollbackAvailabilityExpiration reflects the point at
                  which rolling back may require manual recovery from expired control
                  plane certificates.
                format: date-time
                type: string
              validNextStages:
                items:
                  description: ImageBasedUpgradeStage defines the type for the IBU
                    stage field
                  type: string
                type: array
            type: object
        type: object
        x-kubernetes-validations:
        - message: ibu is a singleton, metadata.name must be 'upgrade'
          rule: self.metadata.name == 'upgrade'
        - message: can not change spec.seedImageRef while ibu is in progress
          rule: '!has(oldSelf.status) || oldSelf.status.conditions.exists(c, c.type==''Idle''
            && c.status==''True'') || self.spec.stage==''Idle'' || has(oldSelf.spec.seedImageRef)
            && has(self.spec.seedImageRef) && oldSelf.spec.seedImageRef==self.spec.seedImageRef
            || !has(self.spec.seedImageRef) && !has(oldSelf.spec.seedImageRef)'
        - message: can not change spec.oadpContent while ibu is in progress
          rule: '!has(oldSelf.status) || oldSelf.status.conditions.exists(c, c.type==''Idle''
            && c.status==''True'') || self.spec.stage==''Idle'' || has(oldSelf.spec.oadpContent)
            && has(self.spec.oadpContent) && oldSelf.spec.oadpContent==self.spec.oadpContent
            || !has(self.spec.oadpContent) && !has(oldSelf.spec.oadpContent)'
        - message: can not change spec.extraManifests while ibu is in progress
          rule: '!has(oldSelf.status) || oldSelf.status.conditions.exists(c, c.type==''Idle''
            && c.status==''True'') || self.spec.stage==''Idle'' || has(oldSelf.spec.extraManifests)
            && has(self.spec.extraManifests) && oldSelf.spec.extraManifests==self.spec.extraManifests
            || !has(self.spec.extraManifests) && !has(oldSelf.spec.extraManifests)'
        - message: can not change spec.autoRollbackOnFailure while ibu is in progress
          rule: '!has(oldSelf.status) || oldSelf.status.conditions.exists(c, c.type==''Idle''
            && c.status==''True'') || self.spec.stage==''Idle'' || has(oldSelf.spec.autoRollbackOnFailure)
            && has(self.spec.autoRollbackOnFailure) && oldSelf.spec.autoRollbackOnFailure==self.spec.autoRollbackOnFailure
            || !has(self.spec.autoRollbackOnFailure) && !has(oldSelf.spec.autoRollbackOnFailure)'
        - message: the stage transition is not permitted. Please refer to status.validNextStages
            for valid transitions. If status.validNextStages is not present, it indicates
            that no transitions are currently allowed
          rule: '!has(oldSelf.status) || has(oldSelf.status.validNextStages) && self.spec.stage
            in oldSelf.status.validNextStages || has(oldSelf.spec.stage) && has(self.spec.stage)
            && oldSelf.spec.stage==self.spec.stage'
    served: true
    storage: true
    subresources:
      status: {}
